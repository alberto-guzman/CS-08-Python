Week 4 CS 8 Notes

Repetition Structure
    Control structure allowing statements to execute mutltiple times
    Keep doing the same task over and over again
    Why is it bad to have redundant code?
        -increase size of the program
        -makes debugging harder
        -code maintainance
    Condition in diamond, and a loop if the condtion is True
        -called a condition controlled loop: b/c we are checking a condition and deciding when to stop based on the condition

    Infinite Loop: program never stops because the condition is always true
    Ctrl + C breaks the execution

    Syntax: while condition: <- while clause
                        statement
                        statement

Interation of a loop is one complete execution of the repeated block
Pre-test Loop: wont even execute if the condition is False when it starts

Priming assignment: something we have to do so that you go into the loop

Ex:
a = False
while a == False:
    a = True
    a = not a


Ex:

password = 'No' <- priming assignment
password = input('Password?') <- priming input

while password != 'bills password':
    password == input('nope try again')
print(all_bills_secrets)

Ex Perfect square:

val = 0
while val < 100:
    if is_square(val):
        result=val
    val = vall + 1


# ask the user for a number
# add the number to a running total
# ask if the use has more numbers to enter (if yes, repeat)

total = 0  # accumulator

more = 'y'
while more == 'y':
    num = int(input('What is the number?'))
    total += num  # agmented assignment
    more = input('do you have more(y/n?')

print('total:' + format(total, '3d'))

This is a count controlled loop


Agmented assignment:

+=
-=
*=
/=
//=
%=


for loop

    ex:

    for var in sequence:

    ex:

    for letter in 'bill':
        print('letter')

B
i
l
l


    ex: list literal

    for i in ['cat',7,True]:
        print('i')

 cat
 7
 True

#list within a list
     for i in ['cat',7,True,[list]]:
        print('i')

 cat
 7
 True


ex: double loop, nested loops

for word in ['cat','dog','mouse']:
    for letter in word:
        print(letter)

c
a
t
d
o
g

#the inner loop will repeat for every value of the outer loop


#indentations become very important in python, example

for animal in ['cat','dog','mouse']:
    print(animal+'is spelled:')
        for letter in animal:
            print(letter)
        print('done!')

cat is spelled
c
a
t
done!



#range
for temp_c in []:


#assumes you start at 0 and is enclusive
range(5)
0 1 2 3 4

range(1,5)
1 2 3 4

range(1,6)
1 2 3 4 5

range(0,20,4)
0
4
8
16


# temp_c is only a loop variable, only exist in the loop

for temp_c in range(0,101,5):
    print(temp_c+____+____)
print('final temp:', temp_c) # wont work


#count down with range
range(10,-1 ,-1)
10
9
8
7
6
5
4
3
2
1
0

for i in range(5,1,-1):
    print('o'*i)

5,4,3,2
00000
000
0



letter = input('what letter?')
friends = ['alice','bob','charlie','dina','edgar']

#print yes if the entered letter is in any of the names
#print no otherwise
